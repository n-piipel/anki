/**
 * Service Worker –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã Anki Flashcards
 * –ö—ç—à–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏ CSV —Ñ–∞–π–ª—ã
 */

const CACHE_NAME = 'anki-flashcards-v1.3';
const STATIC_CACHE = 'static-v1.3';
const DATA_CACHE = 'data-v1.3';

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const STATIC_FILES = [
    '/',
    '/index.html',
    '/css/style.css',
    '/js/app.js',
    '/js/storage.js',
    '/js/spaced-repetition.js',
    '/js/flashcard.js'
];

// –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const DATA_FILES = [
    '/data/index.json',
    '/data/general-knowledge.csv',
    '/data/programming-terms.csv',
    '/data/languages.csv',
    '/data/math.csv',
    '/data/general.csv',
    '/data/gr-ru-verbs.csv'
];

/**
 * Install event - –∫—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
 */
self.addEventListener('install', event => {
    console.log('üîß Service Worker installing...');
    
    event.waitUntil(
        Promise.all([
            // –ö—ç—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            caches.open(STATIC_CACHE).then(cache => {
                console.log('üì¶ Caching static files...');
                return cache.addAll(STATIC_FILES.map(url => new Request(url, {
                    cache: 'reload' // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –≤–µ—Ä—Å–∏–∏
                })));
            }),
            
            // –ö—ç—à —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            caches.open(DATA_CACHE).then(cache => {
                console.log('üìö Caching data files...');
                return Promise.allSettled(
                    DATA_FILES.map(url => 
                        cache.add(new Request(url, {
                            cache: 'reload'
                        })).catch(error => {
                            console.warn(`‚ö†Ô∏è Failed to cache ${url}:`, error);
                        })
                    )
                );
            })
        ]).then(() => {
            console.log('‚úÖ Service Worker installation complete');
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π SW –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            return self.skipWaiting();
        })
    );
});

/**
 * Activate event - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏
 */
self.addEventListener('activate', event => {
    console.log('üöÄ Service Worker activating...');
    
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cacheName => {
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –∫—ç—à–∞
                    if (cacheName !== STATIC_CACHE && 
                        cacheName !== DATA_CACHE &&
                        cacheName !== CACHE_NAME) {
                        console.log(`üóëÔ∏è Deleting old cache: ${cacheName}`);
                        return caches.delete(cacheName);
                    }
                })
            );
        }).then(() => {
            console.log('‚úÖ Service Worker activated');
            // –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            return self.clients.claim();
        })
    );
});

/**
 * Fetch event - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
self.addEventListener('fetch', event => {
    const { request } = event;
    const url = new URL(request.url);
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã –∏ –≤–Ω–µ—à–Ω–∏–µ –¥–æ–º–µ–Ω—ã
    if (request.method !== 'GET' || !url.origin.includes(self.location.origin)) {
        return;
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö (CSV, JSON)
    if (url.pathname.startsWith('/data/')) {
        event.respondWith(staleWhileRevalidate(request, DATA_CACHE));
        return;
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    if (STATIC_FILES.some(file => url.pathname === file || url.pathname.endsWith(file))) {
        event.respondWith(cacheFirst(request, STATIC_CACHE));
        return;
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    event.respondWith(networkFirst(request));
});

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è Cache First - —Å–Ω–∞—á–∞–ª–∞ –∫—ç—à, –ø–æ—Ç–æ–º —Å–µ—Ç—å
 * –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
 */
async function cacheFirst(request, cacheName) {
    try {
        const cache = await caches.open(cacheName);
        const cachedResponse = await cache.match(request);
        
        if (cachedResponse) {
            console.log(`üì¶ Cache hit: ${request.url}`);
            return cachedResponse;
        }
        
        console.log(`üåê Cache miss, fetching: ${request.url}`);
        const networkResponse = await fetch(request);
        
        // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if (networkResponse.status === 200) {
            const responseClone = networkResponse.clone();
            cache.put(request, responseClone);
        }
        
        return networkResponse;
    } catch (error) {
        console.error(`‚ùå Cache first failed for ${request.url}:`, error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        return createOfflineResponse(request);
    }
}

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è Network First - —Å–Ω–∞—á–∞–ª–∞ —Å–µ—Ç—å, –ø–æ—Ç–æ–º –∫—ç—à
 * –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function networkFirst(request) {
    try {
        const networkResponse = await fetch(request);
        return networkResponse;
    } catch (error) {
        console.log(`üîÑ Network failed, trying cache: ${request.url}`);
        
        const cache = await caches.open(STATIC_CACHE);
        const cachedResponse = await cache.match(request);
        
        if (cachedResponse) {
            return cachedResponse;
        }
        
        return createOfflineResponse(request);
    }
}

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è Stale While Revalidate - –±—ã—Å—Ç—Ä–æ –∏–∑ –∫—ç—à–∞ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
 * –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É—Å—Ç–∞—Ä–µ—Ç—å
 */
async function staleWhileRevalidate(request, cacheName) {
    const cache = await caches.open(cacheName);
    const cachedResponse = await cache.match(request);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    const fetchPromise = fetch(request).then(networkResponse => {
        if (networkResponse.status === 200) {
            cache.put(request, networkResponse.clone());
        }
        return networkResponse;
    }).catch(error => {
        console.warn(`Background fetch failed for ${request.url}:`, error);
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    if (cachedResponse) {
        console.log(`‚ö° Stale cache hit: ${request.url}`);
        return cachedResponse;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞, –∂–¥—ë–º —Å–µ—Ç–µ–≤–æ–π –æ—Ç–≤–µ—Ç
    console.log(`üåê No cache, waiting for network: ${request.url}`);
    return fetchPromise;
}

/**
 * –°–æ–∑–¥–∞—Ç—å –æ—Ñ–ª–∞–π–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
 */
function createOfflineResponse(request) {
    const url = new URL(request.url);
    
    // –î–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (request.headers.get('Accept').includes('text/html')) {
        return new Response(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>–û—Ñ–ª–∞–π–Ω - Anki Flashcards</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <style>
                    body { font-family: sans-serif; text-align: center; padding: 50px; }
                    .offline { color: #666; }
                </style>
            </head>
            <body>
                <div class="offline">
                    <h1>üìµ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</h1>
                    <p>–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º</p>
                    <p>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
                    <button onclick="location.reload()">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            </body>
            </html>
        `, {
            status: 200,
            headers: { 'Content-Type': 'text/html' }
        });
    }
    
    // –î–ª—è API/–¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—à–∏–±–∫—É
    if (url.pathname.includes('/data/')) {
        return new Response(JSON.stringify({
            error: '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º',
            message: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É'
        }), {
            status: 503,
            headers: { 'Content-Type': 'application/json' }
        });
    }
    
    // –û–±—â–∏–π –æ—Ñ–ª–∞–π–Ω –æ—Ç–≤–µ—Ç
    return new Response('–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', {
        status: 503,
        headers: { 'Content-Type': 'text/plain; charset=utf-8' }
    });
}

/**
 * Background sync –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
self.addEventListener('sync', event => {
    console.log('üîÑ Background sync:', event.tag);
    
    if (event.tag === 'sync-study-data') {
        event.waitUntil(syncStudyData());
    }
});

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑—É—á–µ–Ω–∏—è
 */
async function syncStudyData() {
    try {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        console.log('üìä Syncing study data...');
        
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        return Promise.resolve();
    } catch (error) {
        console.error('Sync failed:', error);
        throw error;
    }
}

/**
 * Push notifications (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
 */
self.addEventListener('push', event => {
    if (!event.data) return;
    
    const data = event.data.json();
    
    const options = {
        body: data.body || '–í—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫!',
        icon: '/icon-192.png',
        badge: '/badge-72.png',
        vibrate: [200, 100, 200],
        data: data,
        actions: [
            {
                action: 'study',
                title: 'üìö –ò–∑—É—á–∞—Ç—å',
                icon: '/study-icon.png'
            },
            {
                action: 'later',
                title: '‚è∞ –ü–æ–∑–∂–µ',
                icon: '/later-icon.png'
            }
        ]
    };
    
    event.waitUntil(
        self.registration.showNotification('Anki Flashcards', options)
    );
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
 */
self.addEventListener('notificationclick', event => {
    event.notification.close();
    
    if (event.action === 'study') {
        // –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑—É—á–µ–Ω–∏—è
        event.waitUntil(
            clients.openWindow('/#study')
        );
    } else if (event.action === 'later') {
        // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        return;
    } else {
        // –ö–ª–∏–∫ –ø–æ —Å–∞–º–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        event.waitUntil(
            clients.openWindow('/')
        );
    }
});

console.log('üìã Service Worker script loaded'); 